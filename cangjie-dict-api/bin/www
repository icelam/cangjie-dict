#!/usr/bin/env node

// Module dependencies.
const path = require('path');
const fs = require('fs');
const dotenv = require('dotenv');
const debug = require('debug')('cangjie-dict-api:server');
const http = require('http');
const mongoose = require('mongoose');

const app = require('../app');

// Create HTTP server.
const server = http.createServer(app);

// Normalize a port into a number, string, or false.
const normalizePort = (val) => {
  const port = parseInt(val, 10);

  if (Number.isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
};

// Get port from environment and store in Express.
const dotenvFiles = [
  path.resolve(__dirname, `../.env.${process.env.NODE_ENV}.local`),
  path.resolve(__dirname, '../.env.local'),
  path.resolve(__dirname, `../.env.${process.env.NODE_ENV}`),
  path.resolve(__dirname, '../.env')
].filter(dotenvFile => fs.existsSync(dotenvFile));

debug(`${dotenvFiles[0]} will be used.\n`);

dotenv.config({ path: dotenvFiles[0] });
const APP_PORT = normalizePort(process.env.PORT || process.env.DEFAULT_PORT || '80');
app.set('port', APP_PORT);

// Event listener for HTTP server "error" event.
server.on('error', (error) => {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof APP_PORT === 'string'
    ? `Pipe ${APP_PORT}`
    : `Port ${APP_PORT}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
});

// Event listener for HTTP server "listening" event.
server.on('listening', () => {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? `pipe ${addr}`
    : `port ${addr.port}`;
  debug(`Listening on ${bind}`);
});

// Mongoose connection
mongoose.connect(process.env.MONGO_DB_PATH, { useNewUrlParser: true, useUnifiedTopology: true }).then(async () => {
  // Listen on provided port, on all network interfaces.
  server.listen(APP_PORT);
}).catch((e) => {
  debug(`${e}`);
});
